## Python 
## Python Functionals


## Map and Lambda Function
cube = lambda x:x*x*x   # complete the lambda function 

# # Option 1
# def fibonacci(n):
#     # return a list of fibonacci numbers
#     arr = []
#     a = 0
#     b = 1
#     for i in range(n):       
#         arr.append(a)
#         a,b = b,a+b
#     return arr

# Option 2
def fibonacci(n):
    arr = []
    for i in range(n):
        if i<=1:
            arr.append(i)
        else:
            arr.append(arr[-1] + arr[-2])
    return arr

if __name__ == '__main__':
    n = int(input())
    print(list(map(cube, fibonacci(n))))


## Validating Email Addresses With a Filter
# # Option 1
# def fun(s):
#     # return True if s is a valid email, else return False
#     if ('@' not in s) or ('.' not in s) or (' ' in s):
#         return False
#     if s.count('@')>1:
#         return False
#     if s.count('.')>1:
#         return False
#     s = s.replace('@',' ')
#     s = s.replace('.',' ')
#     l = list(map(str, s.split()))
#     if len(l)<3:
#         return False
#     for j in l[0]:
#         if j.isalnum()==False and j!='_' and j!='-':
#             return False
#     for j in l[1]:
#         if j.isalnum()==False:
#             return False
#     if len(l[2])>3 or len(l[2])==0:
#         return False
#     return True

# # Option 2
# def fun(s):
#     # return True if s is a valid email, else return False
#     if not (s.count('@')==1 and s.count('.')==1):
#         return False
#     s = s.replace('@','.')
#     l,m,n = s.split('.')
#     l = l.replace('_','').replace('-','')       
#     if (l.isalnum() and m.isalnum() and n.isalpha() and 0<len(n)<4 and len(l)>0 ):
#         return True
#     else:
#         return False

# Option 3
import re
def fun(s):
    return (True if re.match('[a-zA-Z0-9_-]+@[a-zA-Z0-9]+\.[a-zA-Z]{1,3}$',s) is not None else False)

def filter_mail(emails):
    return list(filter(fun, emails))

if __name__ == '__main__':
    n = int(input())
    emails = []
    for _ in range(n):
        emails.append(input())

filtered_emails = filter_mail(emails)
filtered_emails.sort()
print(filtered_emails)


## Reduce Function
"""
The reduce() function applies a function of two arguments cumulatively on a list of objects in succession from left to right to reduce it to one value. Say you have a list, say [1,2,3] and you have to find its sum.
>>> reduce(lambda x, y : x + y,[1,2,3])
6
>>> reduce(lambda x, y : x + y, [1,2,3], -3)
3
"""
from fractions import Fraction
from functools import reduce

def product(fracs):
    t = reduce(lambda x,y: x*y, fracs) # complete this line with a reduce statement
    return t.numerator, t.denominator

if __name__ == '__main__':
    fracs = []
    for _ in range(int(input())):
        fracs.append(Fraction(*map(int, input().split())))
    result = product(fracs)
    print(*result)


## end ##
