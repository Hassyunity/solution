## Python
## Closures and Decorators


## Standardize Mobile Number Using Decorators
"""
Understanding Python Decorators in 12 Easy Steps!
http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/
"""
# # Option 1
# def wrapper(f):
#     def fun(l):
#         f(['+91 '+c[-10:-5]+' '+c[-5:] for c in l])
#     return fun

# Option 2
def wrapper(f):
    def fun(l):
        f(['+91 '+i[::-1][:10][::-1][:5]+' '+i[::-1][:10][::-1][5:11] for i in l])
    return fun

@wrapper
def sort_phone(l):
    print(*sorted(l), sep='\n')

if __name__ == '__main__':
    l = [input() for _ in range(int(input()))]
    sort_phone(l) 


## Decorators 2 - Name Directory
import operator

# Option 1
def person_lister(f):
    def inner(people):
        # complete the function
        return map(f, sorted(people, key=lambda x: int(x[2]))) 
    return inner

# # Option 2
# def person_lister(f):
#     def inner(people):
#         g=[]
#         people= sorted (people, key=lambda x : int(x[2]))
#         for i in people:
#             g.append(f(i))
#         people=g
#         return people
#     return inner

@person_lister
def name_format(person):
    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]

if __name__ == '__main__':
    people = [input().split() for i in range(int(input()))]
    print(*name_format(people), sep='\n')


## end ##
