## Interview Preparation Kit
## Sorting




## Sorting: Bubble Sort
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the countSwaps function below.
# Option 1
def countSwaps(a):
    num_swap = 0
    while a != sorted(a):
        for i in range(n-1):
            tmp = 0
            if a[i] > a[i+1]:
                tmp = a[i]
                a[i] = a[i+1]
                a[i+1] = tmp
                num_swap += 1
    print('Array is sorted in {} swaps.'.format(num_swap))
    print('First Element:', a[0])
    print('Last Element:', a[-1])

# Option 2
def countSwaps(a):
    num_swap = 0
    while a != sorted(a):
        for i in range(len(a) - 1):
            tmp = 0
            if a[i] > a[i+1]:
                a[i], a[i+1] = a[i+1], a[i]
                num_swap += 1
    print('Array is sorted in {} swaps.'.format(num_swap))
    print('First Element:', a[0])
    print('Last Element:', a[-1])

if __name__ == '__main__':
    n = int(input())
    a = list(map(int, input().rstrip().split()))
    countSwaps(a)




## Mark and Toys
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the maximumToys function below.
# Option 1
def maximumToys(prices, k):
    c = 0   # count
    total = 0   # cumulative prices
    prices.sort()
    while total <= k:
        total += prices[c]
        c += 1
    return c-1   # remove the last item that burst the budget

# Option 2
def maximumToys(prices, k):
    c = 0   # count
    prices = sorted(prices)
    for price in prices:
        k -= price
        if k <= 0:
            break
        c += 1
    return c

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nk = input().split()
    n = int(nk[0])
    k = int(nk[1])
    prices = list(map(int, input().rstrip().split()))
    result = maximumToys(prices, k)
    fptr.write(str(result) + '\n')
    fptr.close()




## Sorting: Comparator
from functools import cmp_to_key
class Player:
    def __init__(self, name, score):
        self.name = name
        self.score = score

    def __repr__(self):
        self.self = self

    def comparator(a, b):
        if a.score==b.score:
            if a.name<b.name:
                return -1
        if a.score>b.score:
            return -1
        return 1

    # def comparator(a, b):   # one-liner alternative
    #     return (-1 if a.name<b.name else 1) if a.score==b.score else -(a.score-b.score)

n = int(input())
data = []
for i in range(n):
    name, score = input().split()
    score = int(score)
    player = Player(name, score)
    data.append(player)
    
data = sorted(data, key=cmp_to_key(Player.comparator))
for i in data:
    print(i.name, i.score)




## Fraudulent Activity Notifications
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the activityNotifications function below.
# Option 1
def activityNotifications(expenditure, d):
    alert = 0 
    MAX = 200 
    c = [0] * (MAX+1)
    for e in expenditure[:d] :
        c[e] += 1

    def median2(): # returns twice the median
        s = 0
        for x in range(MAX+1):
            s += c[x]
            if 2*s >= d : 
                break
        if d%2 == 1 or 2*s > d : 
            return 2*x
        return x + next( y for y in range(x+1,MAX+1) if c[y] )

    for i in range(d,len(expenditure)):
        if expenditure[i] >= median2() : 
            alert += 1
        c[expenditure[i-d]] -= 1 
        c[expenditure[i]] += 1        
    return alert

# Option 2
import bisect
def activityNotifications(expenditure, d):
    result = 0
    if(d >= len(expenditure)):
        return result
    r = (d % 2) -1
    m = d // 2
    l = len(expenditure)
    a = []
    for x in expenditure[:d]:
        bisect.insort_left(a, x)
    for x in range(d,l):
        mn = (a[m] + a[m+r])/2
        if(expenditure[x] >= mn*2):
            result+=1
        a.pop(bisect.bisect_left(a,expenditure[x-d]))
        bisect.insort(a,expenditure[x])
    return result

# Option 3
def activityNotifications(expenditure, d):
    count=[0]*201
    ans=0
    if d>=n:
        return 0
    for i in range(d):
        count[expenditure[i]]+=1
    x=0
    if d%2==0:
        for j in range(d,n):
            a=0
            flag=0
            for k in range(201):
                    a+=count[k]
                    if a>=(d//2) and flag==0:
                        first=k
                        flag=1
                    if a>=((d//2)+1):
                        second=k
                        break
            mean=(first+second)/2
            if expenditure[j]>=(2*mean):
                ans+=1
            count[expenditure[x]]-=1
            count[expenditure[j]]+=1
            x+=1
    else:
        for j in range(d,n):
            a=0
            for k in range(201):
                    a+=count[k]
                    if a>=((d//2)+1):
                        second=k
                        break
            mean=second
            if expenditure[j]>=(2*mean):
                ans+=1
            count[expenditure[x]]-=1
            count[expenditure[j]]+=1
            x+=1
    return ans

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nd = input().split()
    n = int(nd[0])
    d = int(nd[1])
    expenditure = list(map(int, input().rstrip().split()))
    result = activityNotifications(expenditure, d)
    fptr.write(str(result) + '\n')
    fptr.close()




## Merge Sort: Counting Inversions
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the countInversions function below.
def countInversions(arr):
    return merge_sort(arr)


def merge(arr, left_half, right_half):
    i, j, k = 0, 0, 0
    inversions = 0
    left_len, right_len = len(left_half), len(right_half)
    while i < left_len and j < right_len:
        if left_half[i] <= right_half[j]:
            arr[k] = left_half[i]
            i += 1
        else:
            arr[k] = right_half[j]
            j += 1
            inversions += left_len - i
        k += 1

    while i < left_len:
        arr[k] = left_half[i]
        i, k = i+1, k+1

    while j < right_len:
        arr[k] = right_half[j]
        j, k = j+1, k+1

    return inversions


def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr)//2
        left_half, right_half = arr[:mid], arr[mid:]

        inversions = merge_sort(left_half) + merge_sort(right_half) + merge(arr, left_half, right_half)
        return inversions
    return 0


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input())
    for t_itr in range(t):
        n = int(input())
        arr = list(map(int, input().rstrip().split()))
        result = countInversions(arr)
        fptr.write(str(result) + '\n')
    fptr.close()




## end ##
